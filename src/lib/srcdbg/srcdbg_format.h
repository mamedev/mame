// license:BSD-3-Clause
// copyright-holders:David Broman
/*********************************************************************

    srcdbg_format.h

    File-format definition for MAME source-level debugging info files

    See https://docs.mamedev.org/debugger/index.html#generating-mame-debugging-information-files

    Only functionality declared in this file and srcdbg_api.h are
    safe for use by tools outside of MAME.

    Tools should prefer using srcdbg_api.h and linking with
    -lmame_srcdbg_static or -lmame_srcdbg_shared instead of directly
    including this file to manually generate debugging info files.

    This header intentionally written in C to allow C-only tools
    (assemblers, compilers) to #include.


***************************************************************************/


#ifndef MAME_SRCDBG_FORMAT_H
#define MAME_SRCDBG_FORMAT_H

#pragma pack(push, 1)

/* All mame debug info headers start with this */
typedef struct
{
	/* Must be "MDbI" to identify itself as a MAME debug info file */
	char magic[4];

	/* Type of MAME source-debugging information format.  For now, only "simp" is supported */
	char type[4];

	/* Version number of this format.  For now, only 1 is supported */
	unsigned char version;

	/* Information directing a curious user opening this file in a hex editor to the
	   documentation about the MAME source-debugging feature */
	char info[150];
} mame_debug_info_header_base;


/* mame's simple debug info format uses this as its complete header */
typedef struct
{
	mame_debug_info_header_base header_base;

	/* size in bytes of source_file_paths[][] */
	unsigned int source_file_paths_size;

	/* number of elements of line_mappings[] */
	unsigned int num_line_mappings;

	/* size in bytes of symbol_names[][] */
	unsigned int symbol_names_size;

	/* number of elements of global_fixed_symbol_values[] */
	unsigned int num_global_fixed_symbol_values;

	/* size in bytes of local_fixed_symbol_values[] */
	unsigned int local_fixed_symbol_values_size;

	/* size in bytes of local_relative_symbol_values[] */
	unsigned int local_relative_symbol_values_size;
} mame_debug_info_simple_header;


/* Represents a range of 16-bit addresses */
typedef struct
{
	/* address in CPU space of first byte of first instruction for this range */
	unsigned short address_first;

	/* address in CPU space of first byte of last instruction (inclusive) for this range */
	unsigned short address_last;
} address_range;


/*
    A single mapping between a 1-based line number of a source file and a
    range of addresses containing machine-language instructions
    generated by the line.  If a SET of lines generates a range of instructions,
    only the last line is represented.
*/
typedef struct
{
	/* range of addresses corresponding to this line */
	address_range range;

	/* 0-based index of source file (from source_file_paths) containing this line */
	unsigned int source_file_index;

	/* 1-based line number in source file */
	unsigned int line_number;
} srcdbg_line_mapping;


/* Value of a global fixed symbol */
typedef struct
{
	/* 0-based index of symbol (from symbol_names) */
	unsigned int symbol_name_index;

	/* Fixed value of symbol, such as its address */
	int symbol_value;

	/* Bitmask of flags to customize symbol behavior.  See list
	   of MAME_SRCDBG_SYMFLAG_* values from srcdbg_api.h */
	unsigned int symbol_flags;
} global_fixed_symbol_value;


/* Value of a local fixed symbol */
typedef struct
{
	/* 0-based index of symbol (from symbol_names) */
	unsigned int symbol_name_index;

	/* Fixed value of symbol, such as its address */
	int symbol_value;

	/* Number of address ranges, or scopes, for which this symbol is valid */
	unsigned int num_address_ranges;

	/* Address ranges, or scopes, for which this symbol is valid */
	address_range ranges[0];                                   /* Actual array length should be num_address_ranges */
} local_fixed_symbol_value;


/* A local relative symbol consists of multiple address ranges, with each range
 * corresponding to a (potentially distinct) register offset.  For example,
 * multiple local variables in different scopes, with the same name, would
 * be considered the "same" local relative symbol, though each variable would be
 * accessed in a different way, depending on which address the PC is currently at.
 */

/* Rule for how to evaluate a local relative symbol for a given address range */
typedef struct
{
	/* Address range for which this eval rule is valid */
	address_range range;

	/* Register identifier this symbol is offset from.  See list of MAME_DBGSRC_REGISTER_*
	   values from srcdbg_api.h */
	unsigned char reg;

	/* Offset to be applied to register's value to produce the value of this symbol */
	int reg_offset;
} local_relative_eval_rule;

/* Values (set of evaluation rules) for a single local relative symbol */
typedef struct
{
	/* 0-based index of symbol (from symbol_names) */
	unsigned int symbol_name_index;

	/* Number of evaluation rules for calculating this symbol's values */
	unsigned int num_local_relative_eval_rules;

	/* Evaluation rules for calculating this symbol's values */
	local_relative_eval_rule local_relative_eval_rules[0];     /* Actual array length should be num_local_relative_eval_rules */
} local_relative_symbol_value;

/*
    mame_debug_info_simple format is composed from above structs as follows:

    mame_debug_info_simple_header   header
    char                            source_file_paths[][]
    srcdbg_line_mapping             line_mappings[num_line_mappings]
    char                            symbol_names[][]
    global_fixed_symbol_value       global_fixed_symbol_values[num_global_fixed_symbol_values]
    local_fixed_symbol_value        local_fixed_symbol_values[]
    local_relative_symbol_value     local_relative_symbol_values[]

    Description:
    - Each source_file_paths[i] is a null-terminated string path to a source file.  The
      first dimension index fits into an unsigned int.
    - line_mappings need not be in any order
    - There may be 0, 1, or more line_mappings entries per source file / line number pair,
      and only for line numbers corresponding to the first byte of a range of machine-language instructions.
    - No two line_mappings entries should have intersecting address ranges.
    - A symbol name may not appear in multiple global_fixed_symbol_values entries, or in
        both a global_fixed_symbol_values entry and one of the local_* entries.
    - A symbol name may appear in multiple entries of local_fixed_symbol_values[] and
        local_relative_symbol_values[], but not with intersecting scope address ranges.
    - There is no compiler padding in these structures
*/

#pragma pack(pop)

#endif // MAME_SRCDBG_FORMAT_H
