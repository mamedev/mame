// license:BSD-3-Clause
// copyright-holders:Nathan Woods
MAIN:
	// check interrupt lines
	switch(get_pending_interrupt())
	{
		case VECTOR_NMI:    goto NMI;
		case VECTOR_FIRQ:   goto FIRQ;
		case VECTOR_IRQ:    goto IRQ;
	}

	// debugger hook
	m_ppc = m_pc;
	debugger_instruction_hook(m_pc.w);

DISPATCH01:
	// opcode fetch
	m_lic_func(ASSERT_LINE);
	@m_opcode = read_opcode();
	m_lic_func(CLEAR_LINE);

	if (m_free_run) goto FREERUN;

	// dispatch opcode
	switch(m_opcode)
	{
		case 0x00:  case 0x01:                          %DIRECT;    %NEG8;      return;
		case 0x02:                                      %DIRECT;    %XNC8;      return;
		case 0x03:                                      %DIRECT;    %COM8;      return;
		case 0x04:  case 0x05:                          %DIRECT;    %LSR8;      return;
		case 0x06:                                      %DIRECT;    %ROR8;      return;
		case 0x07:                                      %DIRECT;    %ASR8;      return;
		case 0x08:                                      %DIRECT;    %ASL8;      return;
		case 0x09:                                      %DIRECT;    %ROL8;      return;
		case 0x0A:                                      %DIRECT;    %DEC8;      return;
		case 0x0B:                                      %DIRECT;    %XDEC8;     return;
		case 0x0C:                                      %DIRECT;    %INC8;      return;
		case 0x0D:                                      %DIRECT;    %TST8;      return;
		case 0x0E:                                      %DIRECT;    %JMP;       return;
		case 0x0F:                                      %DIRECT;    %CLR8;      return;

		case 0x10:                                                  %DISPATCH10; return;
		case 0x11:                                                  %DISPATCH11; return;
		case 0x12:                                                  %NOP;       return;
		case 0x13:                                                  %SYNC;      return;
		case 0x14:  case 0x15:                                      %FREERUN;   return;
		case 0x16:              set_cond(true);                     %LBRANCH;   return;
		case 0x17:                                                  %LBSR;      return;
		case 0x18:                                                  %X18;       return;
		case 0x19:                                                  %DAA;       return;
		case 0x1A:                                      set_imm();  %ORCC;      return;
		case 0x1B:                                                  %NOP;       return;
		case 0x1C:                                      set_imm();  %ANDCC;     return;
		case 0x1D:                                                  %SEX;       return;
		case 0x1E:                                                  %EXG;       return;
		case 0x1F:                                                  %TFR;       return;

		case 0x20:              set_cond(true);                     %BRANCH;    return;
		case 0x21:              set_cond(false);                    %BRANCH;    return;
		case 0x22:              set_cond(cond_hi());                %BRANCH;    return;
		case 0x23:              set_cond(!cond_hi());               %BRANCH;    return;
		case 0x24:              set_cond(cond_cc());                %BRANCH;    return;
		case 0x25:              set_cond(!cond_cc());               %BRANCH;    return;
		case 0x26:              set_cond(cond_ne());                %BRANCH;    return;
		case 0x27:              set_cond(!cond_ne());               %BRANCH;    return;
		case 0x28:              set_cond(cond_vc());                %BRANCH;    return;
		case 0x29:              set_cond(!cond_vc());               %BRANCH;    return;
		case 0x2A:              set_cond(cond_pl());                %BRANCH;    return;
		case 0x2B:              set_cond(!cond_pl());               %BRANCH;    return;
		case 0x2C:              set_cond(cond_ge());                %BRANCH;    return;
		case 0x2D:              set_cond(!cond_ge());               %BRANCH;    return;
		case 0x2E:              set_cond(cond_gt());                %BRANCH;    return;
		case 0x2F:              set_cond(!cond_gt());               %BRANCH;    return;

		case 0x30:              set_regop16(m_x);       %INDEXED;   %LEA_xy;    return;
		case 0x31:              set_regop16(m_y);       %INDEXED;   %LEA_xy;    return;
		case 0x32:              set_regop16(m_s);       %INDEXED;   %LEA_us;    return;
		case 0x33:              set_regop16(m_u);       %INDEXED;   %LEA_us;    return;
		case 0x34:                                                  %PSHS;      return;
		case 0x35:                                                  %PULS;      return;
		case 0x36:                                                  %PSHU;      return;
		case 0x37:                                                  %PULU;      return;
		case 0x38:                                      set_imm();  %XANDCC;    return;
		case 0x39:                                                  %RTS;       return;
		case 0x3A:                                                  %ABX;       return;
		case 0x3B:                                                  %RTI;       return;
		case 0x3C:                                                  %CWAI;      return;
		case 0x3D:                                                  %MUL;       return;
		case 0x3E:                                                  %XRES;      return;
		case 0x3F:                                                  %SWI;       return;

		case 0x40:  case 0x41:                          set_a();    %NEG8;      return;
		case 0x42:                                      set_a();    %XNC8;      return;
		case 0x43:                                      set_a();    %COM8;      return;
		case 0x44:  case 0x45:                          set_a();    %LSR8;      return;
		case 0x46:                                      set_a();    %ROR8;      return;
		case 0x47:                                      set_a();    %ASR8;      return;
		case 0x48:                                      set_a();    %ASL8;      return;
		case 0x49:                                      set_a();    %ROL8;      return;
		case 0x4A:                                      set_a();    %DEC8;      return;
		case 0x4B:                                      set_a();    %XDEC8;     return;
		case 0x4C:                                      set_a();    %INC8;      return;
		case 0x4D:                                      set_a();    %TST8;      return;
		case 0x4E:                                      set_a();    %XCLR8;     return;
		case 0x4F:                                      set_a();    %CLR8;      return;

		case 0x50:  case 0x51:                          set_b();    %NEG8;      return;
		case 0x52:                                      set_b();    %XNC8;      return;
		case 0x53:                                      set_b();    %COM8;      return;
		case 0x54:  case 0x55:                          set_b();    %LSR8;      return;
		case 0x56:                                      set_b();    %ROR8;      return;
		case 0x57:                                      set_b();    %ASR8;      return;
		case 0x58:                                      set_b();    %ASL8;      return;
		case 0x59:                                      set_b();    %ROL8;      return;
		case 0x5A:                                      set_b();    %DEC8;      return;
		case 0x5B:                                      set_b();    %XDEC8;     return;
		case 0x5C:                                      set_b();    %INC8;      return;
		case 0x5D:                                      set_b();    %TST8;      return;
		case 0x5E:                                      set_b();    %XCLR8;     return;
		case 0x5F:                                      set_b();    %CLR8;      return;

		case 0x60:  case 0x61:                          %INDEXED;   %NEG8;      return;
		case 0x62:                                      %INDEXED;   %XNC8;      return;
		case 0x63:                                      %INDEXED;   %COM8;      return;
		case 0x64:  case 0x65:                          %INDEXED;   %LSR8;      return;
		case 0x66:                                      %INDEXED;   %ROR8;      return;
		case 0x67:                                      %INDEXED;   %ASR8;      return;
		case 0x68:                                      %INDEXED;   %ASL8;      return;
		case 0x69:                                      %INDEXED;   %ROL8;      return;
		case 0x6A:                                      %INDEXED;   %DEC8;      return;
		case 0x6B:                                      %INDEXED;   %XDEC8;     return;
		case 0x6C:                                      %INDEXED;   %INC8;      return;
		case 0x6D:                                      %INDEXED;   %TST8;      return;
		case 0x6E:                                      %INDEXED;   %JMP;       return;
		case 0x6F:                                      %INDEXED;   %CLR8;      return;

		case 0x70:  case 0x71:                          %EXTENDED;  %NEG8;      return;
		case 0x72:                                      %EXTENDED;  %XNC8;      return;
		case 0x73:                                      %EXTENDED;  %COM8;      return;
		case 0x74:  case 0x75:                          %EXTENDED;  %LSR8;      return;
		case 0x76:                                      %EXTENDED;  %ROR8;      return;
		case 0x77:                                      %EXTENDED;  %ASR8;      return;
		case 0x78:                                      %EXTENDED;  %ASL8;      return;
		case 0x79:                                      %EXTENDED;  %ROL8;      return;
		case 0x7A:                                      %EXTENDED;  %DEC8;      return;
		case 0x7B:                                      %EXTENDED;  %XDEC8;     return;
		case 0x7C:                                      %EXTENDED;  %INC8;      return;
		case 0x7D:                                      %EXTENDED;  %TST8;      return;
		case 0x7E:                                      %EXTENDED;  %JMP;       return;
		case 0x7F:                                      %EXTENDED;  %CLR8;      return;

		case 0x80:              set_regop8(m_q.r.a);    set_imm();  %SUB8;      return;
		case 0x81:              set_regop8(m_q.r.a);    set_imm();  %CMP8;      return;
		case 0x82:              set_regop8(m_q.r.a);    set_imm();  %SBC8;      return;
		case 0x83:              set_regop16(m_q.p.d);   set_imm();  %SUB16;     return;
		case 0x84:              set_regop8(m_q.r.a);    set_imm();  %AND8;      return;
		case 0x85:              set_regop8(m_q.r.a);    set_imm();  %BIT8;      return;
		case 0x86:              set_regop8(m_q.r.a);    set_imm();  %LD8;       return;
		case 0x87:              set_regop8(m_q.r.a);    set_imm();  %XST8;      return;
		case 0x88:              set_regop8(m_q.r.a);    set_imm();  %EOR8;      return;
		case 0x89:              set_regop8(m_q.r.a);    set_imm();  %ADC8;      return;
		case 0x8A:              set_regop8(m_q.r.a);    set_imm();  %OR8;       return;
		case 0x8B:              set_regop8(m_q.r.a);    set_imm();  %ADD8;      return;
		case 0x8C:              set_regop16(m_x);       set_imm();  %CMP16;     return;
		case 0x8D:                                                  %BSR;       return;
		case 0x8E:              set_regop16(m_x);       set_imm();  %LD16;      return;
		case 0x8F:              set_regop16(m_x);       set_imm();  %XST16;     return;

		case 0x90:              set_regop8(m_q.r.a);    %DIRECT;    %SUB8;      return;
		case 0x91:              set_regop8(m_q.r.a);    %DIRECT;    %CMP8;      return;
		case 0x92:              set_regop8(m_q.r.a);    %DIRECT;    %SBC8;      return;
		case 0x93:              set_regop16(m_q.p.d);   %DIRECT;    %SUB16;     return;
		case 0x94:              set_regop8(m_q.r.a);    %DIRECT;    %AND8;      return;
		case 0x95:              set_regop8(m_q.r.a);    %DIRECT;    %BIT8;      return;
		case 0x96:              set_regop8(m_q.r.a);    %DIRECT;    %LD8;       return;
		case 0x97:              set_regop8(m_q.r.a);    %DIRECT;    %ST8;       return;
		case 0x98:              set_regop8(m_q.r.a);    %DIRECT;    %EOR8;      return;
		case 0x99:              set_regop8(m_q.r.a);    %DIRECT;    %ADC8;      return;
		case 0x9A:              set_regop8(m_q.r.a);    %DIRECT;    %OR8;       return;
		case 0x9B:              set_regop8(m_q.r.a);    %DIRECT;    %ADD8;      return;
		case 0x9C:              set_regop16(m_x);       %DIRECT;    %CMP16;     return;
		case 0x9D:                                      %DIRECT;    %JSR;       return;
		case 0x9E:              set_regop16(m_x);       %DIRECT;    %LD16;      return;
		case 0x9F:              set_regop16(m_x);       %DIRECT;    %ST16;      return;

		case 0xA0:              set_regop8(m_q.r.a);    %INDEXED;   %SUB8;      return;
		case 0xA1:              set_regop8(m_q.r.a);    %INDEXED;   %CMP8;      return;
		case 0xA2:              set_regop8(m_q.r.a);    %INDEXED;   %SBC8;      return;
		case 0xA3:              set_regop16(m_q.p.d);   %INDEXED;   %SUB16;     return;
		case 0xA4:              set_regop8(m_q.r.a);    %INDEXED;   %AND8;      return;
		case 0xA5:              set_regop8(m_q.r.a);    %INDEXED;   %BIT8;      return;
		case 0xA6:              set_regop8(m_q.r.a);    %INDEXED;   %LD8;       return;
		case 0xA7:              set_regop8(m_q.r.a);    %INDEXED;   %ST8;       return;
		case 0xA8:              set_regop8(m_q.r.a);    %INDEXED;   %EOR8;      return;
		case 0xA9:              set_regop8(m_q.r.a);    %INDEXED;   %ADC8;      return;
		case 0xAA:              set_regop8(m_q.r.a);    %INDEXED;   %OR8;       return;
		case 0xAB:              set_regop8(m_q.r.a);    %INDEXED;   %ADD8;      return;
		case 0xAC:              set_regop16(m_x);       %INDEXED;   %CMP16;     return;
		case 0xAD:                                      %INDEXED;   %JSR;       return;
		case 0xAE:              set_regop16(m_x);       %INDEXED;   %LD16;      return;
		case 0xAF:              set_regop16(m_x);       %INDEXED;   %ST16;      return;

		case 0xB0:              set_regop8(m_q.r.a);    %EXTENDED;  %SUB8;      return;
		case 0xB1:              set_regop8(m_q.r.a);    %EXTENDED;  %CMP8;      return;
		case 0xB2:              set_regop8(m_q.r.a);    %EXTENDED;  %SBC8;      return;
		case 0xB3:              set_regop16(m_q.p.d);   %EXTENDED;  %SUB16;     return;
		case 0xB4:              set_regop8(m_q.r.a);    %EXTENDED;  %AND8;      return;
		case 0xB5:              set_regop8(m_q.r.a);    %EXTENDED;  %BIT8;      return;
		case 0xB6:              set_regop8(m_q.r.a);    %EXTENDED;  %LD8;       return;
		case 0xB7:              set_regop8(m_q.r.a);    %EXTENDED;  %ST8;       return;
		case 0xB8:              set_regop8(m_q.r.a);    %EXTENDED;  %EOR8;      return;
		case 0xB9:              set_regop8(m_q.r.a);    %EXTENDED;  %ADC8;      return;
		case 0xBA:              set_regop8(m_q.r.a);    %EXTENDED;  %OR8;       return;
		case 0xBB:              set_regop8(m_q.r.a);    %EXTENDED;  %ADD8;      return;
		case 0xBC:              set_regop16(m_x);       %EXTENDED;  %CMP16;     return;
		case 0xBD:                                      %EXTENDED;  %JSR;       return;
		case 0xBE:              set_regop16(m_x);       %EXTENDED;  %LD16;      return;
		case 0xBF:              set_regop16(m_x);       %EXTENDED;  %ST16;      return;

		case 0xC0:              set_regop8(m_q.r.b);    set_imm();  %SUB8;      return;
		case 0xC1:              set_regop8(m_q.r.b);    set_imm();  %CMP8;      return;
		case 0xC2:              set_regop8(m_q.r.b);    set_imm();  %SBC8;      return;
		case 0xC3:              set_regop16(m_q.p.d);   set_imm();  %ADD16;     return;
		case 0xC4:              set_regop8(m_q.r.b);    set_imm();  %AND8;      return;
		case 0xC5:              set_regop8(m_q.r.b);    set_imm();  %BIT8;      return;
		case 0xC6:              set_regop8(m_q.r.b);    set_imm();  %LD8;       return;
		case 0xC7:              set_regop8(m_q.r.b);    set_imm();  %XST8;      return;
		case 0xC8:              set_regop8(m_q.r.b);    set_imm();  %EOR8;      return;
		case 0xC9:              set_regop8(m_q.r.b);    set_imm();  %ADC8;      return;
		case 0xCA:              set_regop8(m_q.r.b);    set_imm();  %OR8;       return;
		case 0xCB:              set_regop8(m_q.r.b);    set_imm();  %ADD8;      return;
		case 0xCC:              set_regop16(m_q.p.d);   set_imm();  %LD16;      return;
		case 0xCD:                                                  %FREERUN;   return;
		case 0xCE:              set_regop16(m_u);       set_imm();  %LD16;      return;
		case 0xCF:              set_regop16(m_u);       set_imm();  %XST16;     return;

		case 0xD0:              set_regop8(m_q.r.b);    %DIRECT;    %SUB8;      return;
		case 0xD1:              set_regop8(m_q.r.b);    %DIRECT;    %CMP8;      return;
		case 0xD2:              set_regop8(m_q.r.b);    %DIRECT;    %SBC8;      return;
		case 0xD3:              set_regop16(m_q.p.d);   %DIRECT;    %ADD16;     return;
		case 0xD4:              set_regop8(m_q.r.b);    %DIRECT;    %AND8;      return;
		case 0xD5:              set_regop8(m_q.r.b);    %DIRECT;    %BIT8;      return;
		case 0xD6:              set_regop8(m_q.r.b);    %DIRECT;    %LD8;       return;
		case 0xD7:              set_regop8(m_q.r.b);    %DIRECT;    %ST8;       return;
		case 0xD8:              set_regop8(m_q.r.b);    %DIRECT;    %EOR8;      return;
		case 0xD9:              set_regop8(m_q.r.b);    %DIRECT;    %ADC8;      return;
		case 0xDA:              set_regop8(m_q.r.b);    %DIRECT;    %OR8;       return;
		case 0xDB:              set_regop8(m_q.r.b);    %DIRECT;    %ADD8;      return;
		case 0xDC:              set_regop16(m_q.p.d);   %DIRECT;    %LD16;      return;
		case 0xDD:              set_regop16(m_q.p.d);   %DIRECT;    %ST16;      return;
		case 0xDE:              set_regop16(m_u);       %DIRECT;    %LD16;      return;
		case 0xDF:              set_regop16(m_u);       %DIRECT;    %ST16;      return;

		case 0xE0:              set_regop8(m_q.r.b);    %INDEXED;   %SUB8;      return;
		case 0xE1:              set_regop8(m_q.r.b);    %INDEXED;   %CMP8;      return;
		case 0xE2:              set_regop8(m_q.r.b);    %INDEXED;   %SBC8;      return;
		case 0xE3:              set_regop16(m_q.p.d);   %INDEXED;   %ADD16;     return;
		case 0xE4:              set_regop8(m_q.r.b);    %INDEXED;   %AND8;      return;
		case 0xE5:              set_regop8(m_q.r.b);    %INDEXED;   %BIT8;      return;
		case 0xE6:              set_regop8(m_q.r.b);    %INDEXED;   %LD8;       return;
		case 0xE7:              set_regop8(m_q.r.b);    %INDEXED;   %ST8;       return;
		case 0xE8:              set_regop8(m_q.r.b);    %INDEXED;   %EOR8;      return;
		case 0xE9:              set_regop8(m_q.r.b);    %INDEXED;   %ADC8;      return;
		case 0xEA:              set_regop8(m_q.r.b);    %INDEXED;   %OR8;       return;
		case 0xEB:              set_regop8(m_q.r.b);    %INDEXED;   %ADD8;      return;
		case 0xEC:              set_regop16(m_q.p.d);   %INDEXED;   %LD16;      return;
		case 0xED:              set_regop16(m_q.p.d);   %INDEXED;   %ST16;      return;
		case 0xEE:              set_regop16(m_u);       %INDEXED;   %LD16;      return;
		case 0xEF:              set_regop16(m_u);       %INDEXED;   %ST16;      return;

		case 0xF0:              set_regop8(m_q.r.b);    %EXTENDED;  %SUB8;      return;
		case 0xF1:              set_regop8(m_q.r.b);    %EXTENDED;  %CMP8;      return;
		case 0xF2:              set_regop8(m_q.r.b);    %EXTENDED;  %SBC8;      return;
		case 0xF3:              set_regop16(m_q.p.d);   %EXTENDED;  %ADD16;     return;
		case 0xF4:              set_regop8(m_q.r.b);    %EXTENDED;  %AND8;      return;
		case 0xF5:              set_regop8(m_q.r.b);    %EXTENDED;  %BIT8;      return;
		case 0xF6:              set_regop8(m_q.r.b);    %EXTENDED;  %LD8;       return;
		case 0xF7:              set_regop8(m_q.r.b);    %EXTENDED;  %ST8;       return;
		case 0xF8:              set_regop8(m_q.r.b);    %EXTENDED;  %EOR8;      return;
		case 0xF9:              set_regop8(m_q.r.b);    %EXTENDED;  %ADC8;      return;
		case 0xFA:              set_regop8(m_q.r.b);    %EXTENDED;  %OR8;       return;
		case 0xFB:              set_regop8(m_q.r.b);    %EXTENDED;  %ADD8;      return;
		case 0xFC:              set_regop16(m_q.p.d);   %EXTENDED;  %LD16;      return;
		case 0xFD:              set_regop16(m_q.p.d);   %EXTENDED;  %ST16;      return;
		case 0xFE:              set_regop16(m_u);       %EXTENDED;  %LD16;      return;
		case 0xFF:              set_regop16(m_u);       %EXTENDED;  %ST16;      return;
		default:                                                    %ILLEGAL;   return;
	}
	return;

DISPATCH10:
	@m_opcode = read_opcode();
	switch(m_opcode)
	{
		case 0x10:                                                  %DISPATCH10; return;
		case 0x11:                                                  %DISPATCH10; return;

		case 0x20:              set_cond(true);                     %LBRANCH;   return;
		case 0x21:              set_cond(false);                    %LBRANCH;   return;
		case 0x22:              set_cond(cond_hi());                %LBRANCH;   return;
		case 0x23:              set_cond(!cond_hi());               %LBRANCH;   return;
		case 0x24:              set_cond(cond_cc());                %LBRANCH;   return;
		case 0x25:              set_cond(!cond_cc());               %LBRANCH;   return;
		case 0x26:              set_cond(cond_ne());                %LBRANCH;   return;
		case 0x27:              set_cond(!cond_ne());               %LBRANCH;   return;
		case 0x28:              set_cond(cond_vc());                %LBRANCH;   return;
		case 0x29:              set_cond(!cond_vc());               %LBRANCH;   return;
		case 0x2A:              set_cond(cond_pl());                %LBRANCH;   return;
		case 0x2B:              set_cond(!cond_pl());               %LBRANCH;   return;
		case 0x2C:              set_cond(cond_ge());                %LBRANCH;   return;
		case 0x2D:              set_cond(!cond_ge());               %LBRANCH;   return;
		case 0x2E:              set_cond(cond_gt());                %LBRANCH;   return;
		case 0x2F:              set_cond(!cond_gt());               %LBRANCH;   return;

		case 0x3E:                                                  %XSWI2;     return;
		case 0x3F:                                                  %SWI2;      return;

		case 0x83:              set_regop16(m_q.p.d);   set_imm();  %CMP16;     return;
		case 0x87:              set_regop8(m_q.r.a);    set_imm();  %XST8;      return;
		case 0x8C:              set_regop16(m_y);       set_imm();  %CMP16;     return;
		case 0x8E:              set_regop16(m_y);       set_imm();  %LD16;      return;
		case 0x8F:              set_regop16(m_y);       set_imm();  %XST16;     return;

		case 0x93:              set_regop16(m_q.p.d);   %DIRECT;    %CMP16;     return;
		case 0x9C:              set_regop16(m_y);       %DIRECT;    %CMP16;     return;
		case 0x9E:              set_regop16(m_y);       %DIRECT;    %LD16;      return;
		case 0x9F:              set_regop16(m_y);       %DIRECT;    %ST16;      return;

		case 0xA3:              set_regop16(m_q.p.d);   %INDEXED;   %CMP16;     return;
		case 0xAC:              set_regop16(m_y);       %INDEXED;   %CMP16;     return;
		case 0xAE:              set_regop16(m_y);       %INDEXED;   %LD16;      return;
		case 0xAF:              set_regop16(m_y);       %INDEXED;   %ST16;      return;

		case 0xB3:              set_regop16(m_q.p.d);   %EXTENDED;  %CMP16;     return;
		case 0xBC:              set_regop16(m_y);       %EXTENDED;  %CMP16;     return;
		case 0xBE:              set_regop16(m_y);       %EXTENDED;  %LD16;      return;
		case 0xBF:              set_regop16(m_y);       %EXTENDED;  %ST16;      return;

		case 0xC3:              set_regop16(m_q.p.d);   set_imm();  %XADD16;    return;
		case 0xC7:              set_regop8(m_q.r.b);    set_imm();  %XST8;      return;
		case 0xCE:              set_regop16(m_s);       set_imm();  %LD16;      return;
		case 0xCF:              set_regop16(m_s);       set_imm();  %XST16;     return;

		case 0xD3:              set_regop16(m_q.p.d);   %DIRECT;    %XADD16;    return;
		case 0xDE:              set_regop16(m_s);       %DIRECT;    %LD16;      return;
		case 0xDF:              set_regop16(m_s);       %DIRECT;    %ST16;      return;

		case 0xE3:              set_regop16(m_q.p.d);   %INDEXED;   %XADD16;    return;
		case 0xEE:              set_regop16(m_s);       %INDEXED;   %LD16;      return;
		case 0xEF:              set_regop16(m_s);       %INDEXED;   %ST16;      return;

		case 0xF3:              set_regop16(m_q.p.d);   %EXTENDED;  %XADD16;    return;
		case 0xFE:              set_regop16(m_s);       %EXTENDED;  %LD16;      return;
		case 0xFF:              set_regop16(m_s);       %EXTENDED;  %ST16;      return;

		default:                                                    %DISPATCH01; return;
	}
	return;

DISPATCH11:
	@m_opcode = read_opcode();
	switch(m_opcode)
	{
		case 0x10:                                                  %DISPATCH11; return;
		case 0x11:                                                  %DISPATCH11; return;

		case 0x3E:                                                  %XFIRQ;     return;
		case 0x3F:                                                  %SWI3;      return;
		case 0x83:              set_regop16(m_u);       set_imm();  %CMP16;     return;
		case 0x8C:              set_regop16(m_s);       set_imm();  %CMP16;     return;
		case 0x87:              set_regop8(m_q.r.a);    set_imm();  %XST8;      return;
		case 0x8F:              set_regop16(m_x);       set_imm();  %XST16;     return;
		case 0x93:              set_regop16(m_u);       %DIRECT;    %CMP16;     return;
		case 0x9C:              set_regop16(m_s);       %DIRECT;    %CMP16;     return;
		case 0xC3:              set_regop16(m_u);       set_imm();  %XADD16;    return;
		case 0xC7:              set_regop8(m_q.r.b);    set_imm();  %XST8;      return;
		case 0xCF:              set_regop16(m_u);       set_imm();  %XST16;     return;
		case 0xA3:              set_regop16(m_u);       %INDEXED;   %CMP16;     return;
		case 0xAC:              set_regop16(m_s);       %INDEXED;   %CMP16;     return;
		case 0xB3:              set_regop16(m_u);       %EXTENDED;  %CMP16;     return;
		case 0xBC:              set_regop16(m_s);       %EXTENDED;  %CMP16;     return;
		case 0xD3:              set_regop16(m_u);       %DIRECT;    %XADD16;    return;
		case 0xE3:              set_regop16(m_u);       %INDEXED;   %XADD16;    return;
		case 0xF3:              set_regop16(m_u);       %EXTENDED;  %XADD16;    return;
		default:                                                    %DISPATCH01; return;
	}
	return;

#include "base6x09.lst"

PUSH_REGISTERS:
	if (m_temp.w & 0x80)
	{
		@write_memory(--regop16().w, m_pc.b.l);
		@write_memory(--regop16().w, m_pc.b.h);
		nop();
	}
	if (m_temp.w & 0x40)
	{
		@write_memory(--regop16().w, (&regop16() == &m_s) ? m_u.b.l : m_s.b.l);
		@write_memory(--regop16().w, (&regop16() == &m_s) ? m_u.b.h : m_s.b.h);
		nop();
	}
	if (m_temp.w & 0x20)
	{
		@write_memory(--regop16().w, m_y.b.l);
		@write_memory(--regop16().w, m_y.b.h);
		nop();
	}
	if (m_temp.w & 0x10)
	{
		@write_memory(--regop16().w, m_x.b.l);
		@write_memory(--regop16().w, m_x.b.h);
		nop();
	}
	if (m_temp.w & 0x08)
	{
		@write_memory(--regop16().w, m_dp);
		nop();
	}
	if (m_temp.w & 0x04)
	{
		@write_memory(--regop16().w, m_q.r.b);
		nop();
	}
	if (m_temp.w & 0x02)
	{
		@write_memory(--regop16().w, m_q.r.a);
		nop();
	}
	if (m_temp.w & 0x01)
	{
		@write_memory(--regop16().w, m_cc);
		nop();
	}
	return;

PULL_REGISTERS:
	if (m_temp.w & 0x01)
	{
		@m_cc = read_memory(regop16().w++);
		nop();
	}
	if (m_temp.w & 0x02)
	{
		@m_q.r.a = read_memory(regop16().w++);
		nop();
	}
	if (m_temp.w & 0x04)
	{
		@m_q.r.b = read_memory(regop16().w++);
		nop();
	}
	if (m_temp.w & 0x08)
	{
		@m_dp = read_memory(regop16().w++);
		nop();
	}
	if (m_temp.w & 0x10)
	{
		@m_x.b.h = read_memory(regop16().w++);
		@m_x.b.l = read_memory(regop16().w++);
		nop();
	}
	if (m_temp.w & 0x20)
	{
		@m_y.b.h = read_memory(regop16().w++);
		@m_y.b.l = read_memory(regop16().w++);
		nop();
	}
	if (m_temp.w & 0x40)
	{
		@(&regop16() == &m_s ? m_u : m_s).b.h = read_memory(regop16().w++);
		@(&regop16() == &m_s ? m_u : m_s).b.l = read_memory(regop16().w++);
		nop();
	}
	if (m_temp.w & 0x80)
	{
		@m_pc.b.h = read_memory(regop16().w++);
		@m_pc.b.l = read_memory(regop16().w++);
		nop();
	}
	@(void)read_memory(regop16().w);
	return;

INDEXED:
	@m_opcode = read_opcode_arg();
	if (m_opcode & 0x80)
	{
		switch(m_opcode & 0x7F)
		{
			case 0x00: case 0x20: case 0x40: case 0x60:
			case 0x10: case 0x30: case 0x50: case 0x70:
				m_temp.w = ireg();
				ireg()++;
				@dummy_read_opcode_arg(0);
				@dummy_vma(2);
				break;

			case 0x01: case 0x21: case 0x41: case 0x61:
			case 0x11: case 0x31: case 0x51: case 0x71:
				m_temp.w = ireg();
				ireg() += 2;
				@dummy_read_opcode_arg(0);
				@dummy_vma(3);
				break;

			case 0x02: case 0x22: case 0x42: case 0x62:
			case 0x12: case 0x32: case 0x52: case 0x72:
				ireg()--;
				m_temp.w = ireg();
				@dummy_read_opcode_arg(0);
				@dummy_vma(2);
				break;

			case 0x03: case 0x23: case 0x43: case 0x63:
			case 0x13: case 0x33: case 0x53: case 0x73:
				ireg() -= 2;
				m_temp.w = ireg();
				@dummy_read_opcode_arg(0);
				@dummy_vma(3);
				break;

			case 0x04: case 0x24: case 0x44: case 0x64:
			case 0x14: case 0x34: case 0x54: case 0x74:
				m_temp.w = ireg();
				@dummy_read_opcode_arg(0);
				break;

			case 0x05: case 0x25: case 0x45: case 0x65:
			case 0x15: case 0x35: case 0x55: case 0x75:
				m_temp.w = ireg() + (int8_t) m_q.r.b;
				@dummy_read_opcode_arg(0);
				@dummy_vma(1);
				break;

			case 0x06: case 0x26: case 0x46: case 0x66:
			case 0x16: case 0x36: case 0x56: case 0x76:
				m_temp.w = ireg() + (int8_t) m_q.r.a;
				@dummy_read_opcode_arg(0);
				@dummy_vma(1);
				break;

			case 0x08: case 0x28: case 0x48: case 0x68:
			case 0x18: case 0x38: case 0x58: case 0x78:
				@m_temp.w = ireg() + (int8_t) read_opcode_arg();
				@dummy_read_opcode_arg(0);
				break;

			case 0x09: case 0x29: case 0x49: case 0x69:
			case 0x19: case 0x39: case 0x59: case 0x79:
				@m_temp.b.h = read_opcode_arg();
				@m_temp.b.l = read_opcode_arg();
				m_temp.w = ireg() + m_temp.w;
				@dummy_vma(3);
				break;

			case 0x0B: case 0x2B: case 0x4B: case 0x6B:
			case 0x1B: case 0x3B: case 0x5B: case 0x7B:
				m_temp.w = ireg() + m_q.r.d;
				@dummy_read_opcode_arg(0);
				@dummy_read_opcode_arg(1);
				@dummy_vma(3);
				break;

			case 0x0C: case 0x2C: case 0x4C: case 0x6C:
			case 0x1C: case 0x3C: case 0x5C: case 0x7C:
				@m_temp.b.l = read_opcode_arg();
				m_temp.w = m_pc.w + (int8_t) m_temp.b.l;
				@dummy_vma(1);
				break;

			case 0x0D: case 0x2D: case 0x4D: case 0x6D:
			case 0x1D: case 0x3D: case 0x5D: case 0x7D:
				@m_temp.b.h = read_opcode_arg();
				@m_temp.b.l = read_opcode_arg();
				m_temp.w = m_pc.w + (int16_t) m_temp.w;
				@dummy_vma(4);
				break;

			case 0x0F: case 0x2F: case 0x4F: case 0x6F:
			case 0x1F: case 0x3F: case 0x5F: case 0x7F:
				@m_temp.b.h = read_opcode_arg();
				@m_temp.b.l = read_opcode_arg();
				@dummy_vma(1);
				break;

			default:
				m_temp.w = 0x0000;
				break;
		}

		// indirect mode
		if (m_opcode & 0x10)
		{
			set_ea(m_temp.w);
			@m_temp.b.h = read_operand(0);
			@m_temp.b.l = read_operand(1);
			@dummy_vma(1);
			;
		}
	}
	else
	{
		// 5-bit offset
		m_temp.w = ireg() + (int8_t) ((m_opcode & 0x0F) | (m_opcode & 0x10 ? 0xF0 : 0x00));
		@dummy_read_opcode_arg(0);
		@dummy_vma(1);
		;
	}
	@set_ea(m_temp.w);
	return;

EXG:
	{
		uint8_t param = read_opcode_arg();
		uint16_t reg1, reg2;

		// Exchange differs if 16 bit register or 8 bit register is first
		if (BIT(param, 7))
		{
			reg1 = read_tfr_exg_816_register(param >> 4);
			reg2 = read_tfr_exg_816_register(param >> 0);
		}
		else
		{
			reg1 = read_exg_168_register(param >> 4);
			reg2 = read_exg_168_register(param >> 0);
		}
		write_exgtfr_register(param >> 0, reg1);
		write_exgtfr_register(param >> 4, reg2);
	}
	@dummy_vma(hd6309_native_mode() ? 3 : 6);
	return;

TFR:
	{
		uint8_t param = read_opcode_arg();
		uint16_t reg = read_tfr_exg_816_register(param >> 4);
		write_exgtfr_register(param >> 0, reg);
		if ((param & 0x0F) == 4)
		{
			m_lds_encountered = true;
		}
	}
	@dummy_vma(hd6309_native_mode() ? 2 : 4);
	return;

FREERUN:
	// A CPU test mode that increments the address bus until reset.
	m_free_run = true;
	return;

X18:
	@m_temp.b.l = read_opcode_arg(m_pc.w);
	m_temp.b.l = (m_cc & m_temp.b.l) << 1;
	m_cc = m_temp.b.l | ((m_cc & 0x04) >> 1);
	return;

XANDCC:
	@eat(1);
	goto ANDCC;

XRES:
	set_ea(VECTOR_RESET_FFFE);
	debugger_exception_hook(EXCEPTION_XRES);
	set_regop16(m_s);
	m_temp.w = entire_state_registers();
	@dummy_read_opcode_arg(0);
	@dummy_vma(1);
	%PUSH_REGISTERS;
	goto INTERRUPT_VECTOR;

XNC8:
	if (m_cc & CC_C)
		goto COM8;
	else
		goto NEG8;

XDEC8:
	@m_temp.b.l = read_operand();
	if (m_temp.b.l)
		m_cc |= CC_C;
	else
		m_cc &= ~CC_C;

	m_temp.b.l = set_flags<uint8_t>(CC_NZV, m_temp.b.l, 1, m_temp.b.l - 1);
	if(!hd6309_native_mode() || !is_register_addressing_mode())
	{
		@dummy_read_opcode_arg(0);
		;
	}
	@write_operand(m_temp.b.l);
	return;

XCLR8:
	@read_operand();
	m_cc &= ~CC_NZV;
	m_cc |= CC_Z;
	if(!hd6309_native_mode() || !is_register_addressing_mode())
	{
		@dummy_read_opcode_arg(0);
		;
	}
	@write_operand(0);
	return;

XST8:
	// TODO: Flag setting is much more complex, see:
	// https://github.com/hoglet67/6809Decoder/wiki/Undocumented-6809-Behaviours#store-immediate

	@read_operand();
	set_flags(CC_NZV, regop8());
	return;

XST16:
	// TODO: Flag setting is much more complex, see:
	// https://github.com/hoglet67/6809Decoder/wiki/Undocumented-6809-Behaviours#store-immediate

	m_temp.b.h = read_operand(0);
	write_memory(m_pc.w++, regop16().b.l);
	set_flags(CC_NZV, regop16().w);
	return;

XSWI2:
	set_ea(VECTOR_SWI2);
	debugger_exception_hook(EXCEPTION_SWI2);
	set_regop16(m_s);
	m_temp.w = entire_state_registers();
	@dummy_read_opcode_arg(0);
	@dummy_vma(1);
	%PUSH_REGISTERS;
	goto INTERRUPT_VECTOR;

XADD16:
	@m_temp.b.h = read_operand(0);
	@m_temp.b.l = read_operand(1);
	set_flags(CC_NZVC, regop16().w, m_temp.w, regop16().w + m_temp.w);
	if(!hd6309_native_mode())
	{
		@dummy_read_opcode_arg(0);
		;
	}
	return;

XFIRQ:
	set_ea(VECTOR_FIRQ);
	debugger_exception_hook(EXCEPTION_XFIRQ);
	set_regop16(m_s);
	m_temp.w = entire_state_registers();
	@dummy_read_opcode_arg(0);
	@dummy_vma(1);
	%PUSH_REGISTERS;
	goto INTERRUPT_VECTOR;

ILLEGAL:
	log_illegal();
	return;
